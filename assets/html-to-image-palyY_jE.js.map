{"version":3,"file":"html-to-image-palyY_jE.js","sources":["../../node_modules/html-to-image/es/util.js","../../node_modules/html-to-image/es/clone-pseudos.js","../../node_modules/html-to-image/es/mimes.js","../../node_modules/html-to-image/es/dataurl.js","../../node_modules/html-to-image/es/clone-node.js","../../node_modules/html-to-image/es/embed-resources.js","../../node_modules/html-to-image/es/embed-images.js","../../node_modules/html-to-image/es/embed-webfonts.js","../../node_modules/html-to-image/es/index.js","../../node_modules/html-to-image/es/apply-style.js"],"sourcesContent":["export function resolveUrl(url, baseUrl) {\n    // url is absolute already\n    if (url.match(/^[a-z]+:\\/\\//i)) {\n        return url;\n    }\n    // url is absolute already, without protocol\n    if (url.match(/^\\/\\//)) {\n        return window.location.protocol + url;\n    }\n    // dataURI, mailto:, tel:, etc.\n    if (url.match(/^[a-z]+:/i)) {\n        return url;\n    }\n    const doc = document.implementation.createHTMLDocument();\n    const base = doc.createElement('base');\n    const a = doc.createElement('a');\n    doc.head.appendChild(base);\n    doc.body.appendChild(a);\n    if (baseUrl) {\n        base.href = baseUrl;\n    }\n    a.href = url;\n    return a.href;\n}\nexport const uuid = (() => {\n    // generate uuid for className of pseudo elements.\n    // We should not use GUIDs, otherwise pseudo elements sometimes cannot be captured.\n    let counter = 0;\n    // ref: http://stackoverflow.com/a/6248722/2519373\n    const random = () => \n    // eslint-disable-next-line no-bitwise\n    `0000${((Math.random() * 36 ** 4) << 0).toString(36)}`.slice(-4);\n    return () => {\n        counter += 1;\n        return `u${random()}${counter}`;\n    };\n})();\nexport function delay(ms) {\n    return (args) => new Promise((resolve) => {\n        setTimeout(() => resolve(args), ms);\n    });\n}\nexport function toArray(arrayLike) {\n    const arr = [];\n    for (let i = 0, l = arrayLike.length; i < l; i++) {\n        arr.push(arrayLike[i]);\n    }\n    return arr;\n}\nfunction px(node, styleProperty) {\n    const win = node.ownerDocument.defaultView || window;\n    const val = win.getComputedStyle(node).getPropertyValue(styleProperty);\n    return val ? parseFloat(val.replace('px', '')) : 0;\n}\nfunction getNodeWidth(node) {\n    const leftBorder = px(node, 'border-left-width');\n    const rightBorder = px(node, 'border-right-width');\n    return node.clientWidth + leftBorder + rightBorder;\n}\nfunction getNodeHeight(node) {\n    const topBorder = px(node, 'border-top-width');\n    const bottomBorder = px(node, 'border-bottom-width');\n    return node.clientHeight + topBorder + bottomBorder;\n}\nexport function getImageSize(targetNode, options = {}) {\n    const width = options.width || getNodeWidth(targetNode);\n    const height = options.height || getNodeHeight(targetNode);\n    return { width, height };\n}\nexport function getPixelRatio() {\n    let ratio;\n    let FINAL_PROCESS;\n    try {\n        FINAL_PROCESS = process;\n    }\n    catch (e) {\n        // pass\n    }\n    const val = FINAL_PROCESS && FINAL_PROCESS.env\n        ? FINAL_PROCESS.env.devicePixelRatio\n        : null;\n    if (val) {\n        ratio = parseInt(val, 10);\n        if (Number.isNaN(ratio)) {\n            ratio = 1;\n        }\n    }\n    return ratio || window.devicePixelRatio || 1;\n}\n// @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas#maximum_canvas_size\nconst canvasDimensionLimit = 16384;\nexport function checkCanvasDimensions(canvas) {\n    if (canvas.width > canvasDimensionLimit ||\n        canvas.height > canvasDimensionLimit) {\n        if (canvas.width > canvasDimensionLimit &&\n            canvas.height > canvasDimensionLimit) {\n            if (canvas.width > canvas.height) {\n                canvas.height *= canvasDimensionLimit / canvas.width;\n                canvas.width = canvasDimensionLimit;\n            }\n            else {\n                canvas.width *= canvasDimensionLimit / canvas.height;\n                canvas.height = canvasDimensionLimit;\n            }\n        }\n        else if (canvas.width > canvasDimensionLimit) {\n            canvas.height *= canvasDimensionLimit / canvas.width;\n            canvas.width = canvasDimensionLimit;\n        }\n        else {\n            canvas.width *= canvasDimensionLimit / canvas.height;\n            canvas.height = canvasDimensionLimit;\n        }\n    }\n}\nexport function canvasToBlob(canvas, options = {}) {\n    if (canvas.toBlob) {\n        return new Promise((resolve) => {\n            canvas.toBlob(resolve, options.type ? options.type : 'image/png', options.quality ? options.quality : 1);\n        });\n    }\n    return new Promise((resolve) => {\n        const binaryString = window.atob(canvas\n            .toDataURL(options.type ? options.type : undefined, options.quality ? options.quality : undefined)\n            .split(',')[1]);\n        const len = binaryString.length;\n        const binaryArray = new Uint8Array(len);\n        for (let i = 0; i < len; i += 1) {\n            binaryArray[i] = binaryString.charCodeAt(i);\n        }\n        resolve(new Blob([binaryArray], {\n            type: options.type ? options.type : 'image/png',\n        }));\n    });\n}\nexport function createImage(url) {\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.decode = () => resolve(img);\n        img.onload = () => resolve(img);\n        img.onerror = reject;\n        img.crossOrigin = 'anonymous';\n        img.decoding = 'async';\n        img.src = url;\n    });\n}\nexport async function svgToDataURL(svg) {\n    return Promise.resolve()\n        .then(() => new XMLSerializer().serializeToString(svg))\n        .then(encodeURIComponent)\n        .then((html) => `data:image/svg+xml;charset=utf-8,${html}`);\n}\nexport async function nodeToDataURL(node, width, height) {\n    const xmlns = 'http://www.w3.org/2000/svg';\n    const svg = document.createElementNS(xmlns, 'svg');\n    const foreignObject = document.createElementNS(xmlns, 'foreignObject');\n    svg.setAttribute('width', `${width}`);\n    svg.setAttribute('height', `${height}`);\n    svg.setAttribute('viewBox', `0 0 ${width} ${height}`);\n    foreignObject.setAttribute('width', '100%');\n    foreignObject.setAttribute('height', '100%');\n    foreignObject.setAttribute('x', '0');\n    foreignObject.setAttribute('y', '0');\n    foreignObject.setAttribute('externalResourcesRequired', 'true');\n    svg.appendChild(foreignObject);\n    foreignObject.appendChild(node);\n    return svgToDataURL(svg);\n}\nexport const isInstanceOfElement = (node, instance) => {\n    if (node instanceof instance)\n        return true;\n    const nodePrototype = Object.getPrototypeOf(node);\n    if (nodePrototype === null)\n        return false;\n    return (nodePrototype.constructor.name === instance.name ||\n        isInstanceOfElement(nodePrototype, instance));\n};\n//# sourceMappingURL=util.js.map","import { uuid, toArray } from './util';\nfunction formatCSSText(style) {\n    const content = style.getPropertyValue('content');\n    return `${style.cssText} content: '${content.replace(/'|\"/g, '')}';`;\n}\nfunction formatCSSProperties(style) {\n    return toArray(style)\n        .map((name) => {\n        const value = style.getPropertyValue(name);\n        const priority = style.getPropertyPriority(name);\n        return `${name}: ${value}${priority ? ' !important' : ''};`;\n    })\n        .join(' ');\n}\nfunction getPseudoElementStyle(className, pseudo, style) {\n    const selector = `.${className}:${pseudo}`;\n    const cssText = style.cssText\n        ? formatCSSText(style)\n        : formatCSSProperties(style);\n    return document.createTextNode(`${selector}{${cssText}}`);\n}\nfunction clonePseudoElement(nativeNode, clonedNode, pseudo) {\n    const style = window.getComputedStyle(nativeNode, pseudo);\n    const content = style.getPropertyValue('content');\n    if (content === '' || content === 'none') {\n        return;\n    }\n    const className = uuid();\n    try {\n        clonedNode.className = `${clonedNode.className} ${className}`;\n    }\n    catch (err) {\n        return;\n    }\n    const styleElement = document.createElement('style');\n    styleElement.appendChild(getPseudoElementStyle(className, pseudo, style));\n    clonedNode.appendChild(styleElement);\n}\nexport function clonePseudoElements(nativeNode, clonedNode) {\n    clonePseudoElement(nativeNode, clonedNode, ':before');\n    clonePseudoElement(nativeNode, clonedNode, ':after');\n}\n//# sourceMappingURL=clone-pseudos.js.map","const WOFF = 'application/font-woff';\nconst JPEG = 'image/jpeg';\nconst mimes = {\n    woff: WOFF,\n    woff2: WOFF,\n    ttf: 'application/font-truetype',\n    eot: 'application/vnd.ms-fontobject',\n    png: 'image/png',\n    jpg: JPEG,\n    jpeg: JPEG,\n    gif: 'image/gif',\n    tiff: 'image/tiff',\n    svg: 'image/svg+xml',\n    webp: 'image/webp',\n};\nfunction getExtension(url) {\n    const match = /\\.([^./]*?)$/g.exec(url);\n    return match ? match[1] : '';\n}\nexport function getMimeType(url) {\n    const extension = getExtension(url).toLowerCase();\n    return mimes[extension] || '';\n}\n//# sourceMappingURL=mimes.js.map","function getContentFromDataUrl(dataURL) {\n    return dataURL.split(/,/)[1];\n}\nexport function isDataUrl(url) {\n    return url.search(/^(data:)/) !== -1;\n}\nexport function makeDataUrl(content, mimeType) {\n    return `data:${mimeType};base64,${content}`;\n}\nexport async function fetchAsDataURL(url, init, process) {\n    const res = await fetch(url, init);\n    if (res.status === 404) {\n        throw new Error(`Resource \"${res.url}\" not found`);\n    }\n    const blob = await res.blob();\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onerror = reject;\n        reader.onloadend = () => {\n            try {\n                resolve(process({ res, result: reader.result }));\n            }\n            catch (error) {\n                reject(error);\n            }\n        };\n        reader.readAsDataURL(blob);\n    });\n}\nconst cache = {};\nfunction getCacheKey(url, contentType, includeQueryParams) {\n    let key = url.replace(/\\?.*/, '');\n    if (includeQueryParams) {\n        key = url;\n    }\n    // font resource\n    if (/ttf|otf|eot|woff2?/i.test(key)) {\n        key = key.replace(/.*\\//, '');\n    }\n    return contentType ? `[${contentType}]${key}` : key;\n}\nexport async function resourceToDataURL(resourceUrl, contentType, options) {\n    const cacheKey = getCacheKey(resourceUrl, contentType, options.includeQueryParams);\n    if (cache[cacheKey] != null) {\n        return cache[cacheKey];\n    }\n    // ref: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n    if (options.cacheBust) {\n        // eslint-disable-next-line no-param-reassign\n        resourceUrl += (/\\?/.test(resourceUrl) ? '&' : '?') + new Date().getTime();\n    }\n    let dataURL;\n    try {\n        const content = await fetchAsDataURL(resourceUrl, options.fetchRequestInit, ({ res, result }) => {\n            if (!contentType) {\n                // eslint-disable-next-line no-param-reassign\n                contentType = res.headers.get('Content-Type') || '';\n            }\n            return getContentFromDataUrl(result);\n        });\n        dataURL = makeDataUrl(content, contentType);\n    }\n    catch (error) {\n        dataURL = options.imagePlaceholder || '';\n        let msg = `Failed to fetch resource: ${resourceUrl}`;\n        if (error) {\n            msg = typeof error === 'string' ? error : error.message;\n        }\n        if (msg) {\n            console.warn(msg);\n        }\n    }\n    cache[cacheKey] = dataURL;\n    return dataURL;\n}\n//# sourceMappingURL=dataurl.js.map","import { clonePseudoElements } from './clone-pseudos';\nimport { createImage, toArray, isInstanceOfElement } from './util';\nimport { getMimeType } from './mimes';\nimport { resourceToDataURL } from './dataurl';\nasync function cloneCanvasElement(canvas) {\n    const dataURL = canvas.toDataURL();\n    if (dataURL === 'data:,') {\n        return canvas.cloneNode(false);\n    }\n    return createImage(dataURL);\n}\nasync function cloneVideoElement(video, options) {\n    if (video.currentSrc) {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        canvas.width = video.clientWidth;\n        canvas.height = video.clientHeight;\n        ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        const dataURL = canvas.toDataURL();\n        return createImage(dataURL);\n    }\n    const poster = video.poster;\n    const contentType = getMimeType(poster);\n    const dataURL = await resourceToDataURL(poster, contentType, options);\n    return createImage(dataURL);\n}\nasync function cloneIFrameElement(iframe) {\n    var _a;\n    try {\n        if ((_a = iframe === null || iframe === void 0 ? void 0 : iframe.contentDocument) === null || _a === void 0 ? void 0 : _a.body) {\n            return (await cloneNode(iframe.contentDocument.body, {}, true));\n        }\n    }\n    catch (_b) {\n        // Failed to clone iframe\n    }\n    return iframe.cloneNode(false);\n}\nasync function cloneSingleNode(node, options) {\n    if (isInstanceOfElement(node, HTMLCanvasElement)) {\n        return cloneCanvasElement(node);\n    }\n    if (isInstanceOfElement(node, HTMLVideoElement)) {\n        return cloneVideoElement(node, options);\n    }\n    if (isInstanceOfElement(node, HTMLIFrameElement)) {\n        return cloneIFrameElement(node);\n    }\n    return node.cloneNode(false);\n}\nconst isSlotElement = (node) => node.tagName != null && node.tagName.toUpperCase() === 'SLOT';\nasync function cloneChildren(nativeNode, clonedNode, options) {\n    var _a, _b;\n    let children = [];\n    if (isSlotElement(nativeNode) && nativeNode.assignedNodes) {\n        children = toArray(nativeNode.assignedNodes());\n    }\n    else if (isInstanceOfElement(nativeNode, HTMLIFrameElement) &&\n        ((_a = nativeNode.contentDocument) === null || _a === void 0 ? void 0 : _a.body)) {\n        children = toArray(nativeNode.contentDocument.body.childNodes);\n    }\n    else {\n        children = toArray(((_b = nativeNode.shadowRoot) !== null && _b !== void 0 ? _b : nativeNode).childNodes);\n    }\n    if (children.length === 0 ||\n        isInstanceOfElement(nativeNode, HTMLVideoElement)) {\n        return clonedNode;\n    }\n    await children.reduce((deferred, child) => deferred\n        .then(() => cloneNode(child, options))\n        .then((clonedChild) => {\n        if (clonedChild) {\n            clonedNode.appendChild(clonedChild);\n        }\n    }), Promise.resolve());\n    return clonedNode;\n}\nfunction cloneCSSStyle(nativeNode, clonedNode) {\n    const targetStyle = clonedNode.style;\n    if (!targetStyle) {\n        return;\n    }\n    const sourceStyle = window.getComputedStyle(nativeNode);\n    if (sourceStyle.cssText) {\n        targetStyle.cssText = sourceStyle.cssText;\n        targetStyle.transformOrigin = sourceStyle.transformOrigin;\n    }\n    else {\n        toArray(sourceStyle).forEach((name) => {\n            let value = sourceStyle.getPropertyValue(name);\n            if (name === 'font-size' && value.endsWith('px')) {\n                const reducedFont = Math.floor(parseFloat(value.substring(0, value.length - 2))) - 0.1;\n                value = `${reducedFont}px`;\n            }\n            if (isInstanceOfElement(nativeNode, HTMLIFrameElement) &&\n                name === 'display' &&\n                value === 'inline') {\n                value = 'block';\n            }\n            if (name === 'd' && clonedNode.getAttribute('d')) {\n                value = `path(${clonedNode.getAttribute('d')})`;\n            }\n            targetStyle.setProperty(name, value, sourceStyle.getPropertyPriority(name));\n        });\n    }\n}\nfunction cloneInputValue(nativeNode, clonedNode) {\n    if (isInstanceOfElement(nativeNode, HTMLTextAreaElement)) {\n        clonedNode.innerHTML = nativeNode.value;\n    }\n    if (isInstanceOfElement(nativeNode, HTMLInputElement)) {\n        clonedNode.setAttribute('value', nativeNode.value);\n    }\n}\nfunction cloneSelectValue(nativeNode, clonedNode) {\n    if (isInstanceOfElement(nativeNode, HTMLSelectElement)) {\n        const clonedSelect = clonedNode;\n        const selectedOption = Array.from(clonedSelect.children).find((child) => nativeNode.value === child.getAttribute('value'));\n        if (selectedOption) {\n            selectedOption.setAttribute('selected', '');\n        }\n    }\n}\nfunction decorate(nativeNode, clonedNode) {\n    if (isInstanceOfElement(clonedNode, Element)) {\n        cloneCSSStyle(nativeNode, clonedNode);\n        clonePseudoElements(nativeNode, clonedNode);\n        cloneInputValue(nativeNode, clonedNode);\n        cloneSelectValue(nativeNode, clonedNode);\n    }\n    return clonedNode;\n}\nasync function ensureSVGSymbols(clone, options) {\n    const uses = clone.querySelectorAll ? clone.querySelectorAll('use') : [];\n    if (uses.length === 0) {\n        return clone;\n    }\n    const processedDefs = {};\n    for (let i = 0; i < uses.length; i++) {\n        const use = uses[i];\n        const id = use.getAttribute('xlink:href');\n        if (id) {\n            const exist = clone.querySelector(id);\n            const definition = document.querySelector(id);\n            if (!exist && definition && !processedDefs[id]) {\n                // eslint-disable-next-line no-await-in-loop\n                processedDefs[id] = (await cloneNode(definition, options, true));\n            }\n        }\n    }\n    const nodes = Object.values(processedDefs);\n    if (nodes.length) {\n        const ns = 'http://www.w3.org/1999/xhtml';\n        const svg = document.createElementNS(ns, 'svg');\n        svg.setAttribute('xmlns', ns);\n        svg.style.position = 'absolute';\n        svg.style.width = '0';\n        svg.style.height = '0';\n        svg.style.overflow = 'hidden';\n        svg.style.display = 'none';\n        const defs = document.createElementNS(ns, 'defs');\n        svg.appendChild(defs);\n        for (let i = 0; i < nodes.length; i++) {\n            defs.appendChild(nodes[i]);\n        }\n        clone.appendChild(svg);\n    }\n    return clone;\n}\nexport async function cloneNode(node, options, isRoot) {\n    if (!isRoot && options.filter && !options.filter(node)) {\n        return null;\n    }\n    return Promise.resolve(node)\n        .then((clonedNode) => cloneSingleNode(clonedNode, options))\n        .then((clonedNode) => cloneChildren(node, clonedNode, options))\n        .then((clonedNode) => decorate(node, clonedNode))\n        .then((clonedNode) => ensureSVGSymbols(clonedNode, options));\n}\n//# sourceMappingURL=clone-node.js.map","import { resolveUrl } from './util';\nimport { getMimeType } from './mimes';\nimport { isDataUrl, makeDataUrl, resourceToDataURL } from './dataurl';\nconst URL_REGEX = /url\\((['\"]?)([^'\"]+?)\\1\\)/g;\nconst URL_WITH_FORMAT_REGEX = /url\\([^)]+\\)\\s*format\\(([\"']?)([^\"']+)\\1\\)/g;\nconst FONT_SRC_REGEX = /src:\\s*(?:url\\([^)]+\\)\\s*format\\([^)]+\\)[,;]\\s*)+/g;\nfunction toRegex(url) {\n    // eslint-disable-next-line no-useless-escape\n    const escaped = url.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n    return new RegExp(`(url\\\\(['\"]?)(${escaped})(['\"]?\\\\))`, 'g');\n}\nexport function parseURLs(cssText) {\n    const urls = [];\n    cssText.replace(URL_REGEX, (raw, quotation, url) => {\n        urls.push(url);\n        return raw;\n    });\n    return urls.filter((url) => !isDataUrl(url));\n}\nexport async function embed(cssText, resourceURL, baseURL, options, getContentFromUrl) {\n    try {\n        const resolvedURL = baseURL ? resolveUrl(resourceURL, baseURL) : resourceURL;\n        const contentType = getMimeType(resourceURL);\n        let dataURL;\n        if (getContentFromUrl) {\n            const content = await getContentFromUrl(resolvedURL);\n            dataURL = makeDataUrl(content, contentType);\n        }\n        else {\n            dataURL = await resourceToDataURL(resolvedURL, contentType, options);\n        }\n        return cssText.replace(toRegex(resourceURL), `$1${dataURL}$3`);\n    }\n    catch (error) {\n        // pass\n    }\n    return cssText;\n}\nfunction filterPreferredFontFormat(str, { preferredFontFormat }) {\n    return !preferredFontFormat\n        ? str\n        : str.replace(FONT_SRC_REGEX, (match) => {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                const [src, , format] = URL_WITH_FORMAT_REGEX.exec(match) || [];\n                if (!format) {\n                    return '';\n                }\n                if (format === preferredFontFormat) {\n                    return `src: ${src};`;\n                }\n            }\n        });\n}\nexport function shouldEmbed(url) {\n    return url.search(URL_REGEX) !== -1;\n}\nexport async function embedResources(cssText, baseUrl, options) {\n    if (!shouldEmbed(cssText)) {\n        return cssText;\n    }\n    const filteredCSSText = filterPreferredFontFormat(cssText, options);\n    const urls = parseURLs(filteredCSSText);\n    return urls.reduce((deferred, url) => deferred.then((css) => embed(css, url, baseUrl, options)), Promise.resolve(filteredCSSText));\n}\n//# sourceMappingURL=embed-resources.js.map","import { embedResources } from './embed-resources';\nimport { toArray, isInstanceOfElement } from './util';\nimport { isDataUrl, resourceToDataURL } from './dataurl';\nimport { getMimeType } from './mimes';\nasync function embedProp(propName, node, options) {\n    var _a;\n    const propValue = (_a = node.style) === null || _a === void 0 ? void 0 : _a.getPropertyValue(propName);\n    if (propValue) {\n        const cssString = await embedResources(propValue, null, options);\n        node.style.setProperty(propName, cssString, node.style.getPropertyPriority(propName));\n        return true;\n    }\n    return false;\n}\nasync function embedBackground(clonedNode, options) {\n    if (!(await embedProp('background', clonedNode, options))) {\n        await embedProp('background-image', clonedNode, options);\n    }\n    if (!(await embedProp('mask', clonedNode, options))) {\n        await embedProp('mask-image', clonedNode, options);\n    }\n}\nasync function embedImageNode(clonedNode, options) {\n    const isImageElement = isInstanceOfElement(clonedNode, HTMLImageElement);\n    if (!(isImageElement && !isDataUrl(clonedNode.src)) &&\n        !(isInstanceOfElement(clonedNode, SVGImageElement) &&\n            !isDataUrl(clonedNode.href.baseVal))) {\n        return;\n    }\n    const url = isImageElement ? clonedNode.src : clonedNode.href.baseVal;\n    const dataURL = await resourceToDataURL(url, getMimeType(url), options);\n    await new Promise((resolve, reject) => {\n        clonedNode.onload = resolve;\n        clonedNode.onerror = reject;\n        const image = clonedNode;\n        if (image.decode) {\n            image.decode = resolve;\n        }\n        if (image.loading === 'lazy') {\n            image.loading = 'eager';\n        }\n        if (isImageElement) {\n            clonedNode.srcset = '';\n            clonedNode.src = dataURL;\n        }\n        else {\n            clonedNode.href.baseVal = dataURL;\n        }\n    });\n}\nasync function embedChildren(clonedNode, options) {\n    const children = toArray(clonedNode.childNodes);\n    const deferreds = children.map((child) => embedImages(child, options));\n    await Promise.all(deferreds).then(() => clonedNode);\n}\nexport async function embedImages(clonedNode, options) {\n    if (isInstanceOfElement(clonedNode, Element)) {\n        await embedBackground(clonedNode, options);\n        await embedImageNode(clonedNode, options);\n        await embedChildren(clonedNode, options);\n    }\n}\n//# sourceMappingURL=embed-images.js.map","import { toArray } from './util';\nimport { fetchAsDataURL } from './dataurl';\nimport { shouldEmbed, embedResources } from './embed-resources';\nconst cssFetchCache = {};\nasync function fetchCSS(url) {\n    let cache = cssFetchCache[url];\n    if (cache != null) {\n        return cache;\n    }\n    const res = await fetch(url);\n    const cssText = await res.text();\n    cache = { url, cssText };\n    cssFetchCache[url] = cache;\n    return cache;\n}\nasync function embedFonts(data, options) {\n    let cssText = data.cssText;\n    const regexUrl = /url\\([\"']?([^\"')]+)[\"']?\\)/g;\n    const fontLocs = cssText.match(/url\\([^)]+\\)/g) || [];\n    const loadFonts = fontLocs.map(async (loc) => {\n        let url = loc.replace(regexUrl, '$1');\n        if (!url.startsWith('https://')) {\n            url = new URL(url, data.url).href;\n        }\n        return fetchAsDataURL(url, options.fetchRequestInit, ({ result }) => {\n            cssText = cssText.replace(loc, `url(${result})`);\n            return [loc, result];\n        });\n    });\n    return Promise.all(loadFonts).then(() => cssText);\n}\nfunction parseCSS(source) {\n    if (source == null) {\n        return [];\n    }\n    const result = [];\n    const commentsRegex = /(\\/\\*[\\s\\S]*?\\*\\/)/gi;\n    // strip out comments\n    let cssText = source.replace(commentsRegex, '');\n    // eslint-disable-next-line prefer-regex-literals\n    const keyframesRegex = new RegExp('((@.*?keyframes [\\\\s\\\\S]*?){([\\\\s\\\\S]*?}\\\\s*?)})', 'gi');\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const matches = keyframesRegex.exec(cssText);\n        if (matches === null) {\n            break;\n        }\n        result.push(matches[0]);\n    }\n    cssText = cssText.replace(keyframesRegex, '');\n    const importRegex = /@import[\\s\\S]*?url\\([^)]*\\)[\\s\\S]*?;/gi;\n    // to match css & media queries together\n    const combinedCSSRegex = '((\\\\s*?(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)?\\\\s*?@media[\\\\s\\\\S]' +\n        '*?){([\\\\s\\\\S]*?)}\\\\s*?})|(([\\\\s\\\\S]*?){([\\\\s\\\\S]*?)})';\n    // unified regex\n    const unifiedRegex = new RegExp(combinedCSSRegex, 'gi');\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let matches = importRegex.exec(cssText);\n        if (matches === null) {\n            matches = unifiedRegex.exec(cssText);\n            if (matches === null) {\n                break;\n            }\n            else {\n                importRegex.lastIndex = unifiedRegex.lastIndex;\n            }\n        }\n        else {\n            unifiedRegex.lastIndex = importRegex.lastIndex;\n        }\n        result.push(matches[0]);\n    }\n    return result;\n}\nasync function getCSSRules(styleSheets, options) {\n    const ret = [];\n    const deferreds = [];\n    // First loop inlines imports\n    styleSheets.forEach((sheet) => {\n        if ('cssRules' in sheet) {\n            try {\n                toArray(sheet.cssRules || []).forEach((item, index) => {\n                    if (item.type === CSSRule.IMPORT_RULE) {\n                        let importIndex = index + 1;\n                        const url = item.href;\n                        const deferred = fetchCSS(url)\n                            .then((metadata) => embedFonts(metadata, options))\n                            .then((cssText) => parseCSS(cssText).forEach((rule) => {\n                            try {\n                                sheet.insertRule(rule, rule.startsWith('@import')\n                                    ? (importIndex += 1)\n                                    : sheet.cssRules.length);\n                            }\n                            catch (error) {\n                                console.error('Error inserting rule from remote css', {\n                                    rule,\n                                    error,\n                                });\n                            }\n                        }))\n                            .catch((e) => {\n                            console.error('Error loading remote css', e.toString());\n                        });\n                        deferreds.push(deferred);\n                    }\n                });\n            }\n            catch (e) {\n                const inline = styleSheets.find((a) => a.href == null) || document.styleSheets[0];\n                if (sheet.href != null) {\n                    deferreds.push(fetchCSS(sheet.href)\n                        .then((metadata) => embedFonts(metadata, options))\n                        .then((cssText) => parseCSS(cssText).forEach((rule) => {\n                        inline.insertRule(rule, sheet.cssRules.length);\n                    }))\n                        .catch((err) => {\n                        console.error('Error loading remote stylesheet', err);\n                    }));\n                }\n                console.error('Error inlining remote css file', e);\n            }\n        }\n    });\n    return Promise.all(deferreds).then(() => {\n        // Second loop parses rules\n        styleSheets.forEach((sheet) => {\n            if ('cssRules' in sheet) {\n                try {\n                    toArray(sheet.cssRules || []).forEach((item) => {\n                        ret.push(item);\n                    });\n                }\n                catch (e) {\n                    console.error(`Error while reading CSS rules from ${sheet.href}`, e);\n                }\n            }\n        });\n        return ret;\n    });\n}\nfunction getWebFontRules(cssRules) {\n    return cssRules\n        .filter((rule) => rule.type === CSSRule.FONT_FACE_RULE)\n        .filter((rule) => shouldEmbed(rule.style.getPropertyValue('src')));\n}\nasync function parseWebFontRules(node, options) {\n    if (node.ownerDocument == null) {\n        throw new Error('Provided element is not within a Document');\n    }\n    const styleSheets = toArray(node.ownerDocument.styleSheets);\n    const cssRules = await getCSSRules(styleSheets, options);\n    return getWebFontRules(cssRules);\n}\nexport async function getWebFontCSS(node, options) {\n    const rules = await parseWebFontRules(node, options);\n    const cssTexts = await Promise.all(rules.map((rule) => {\n        const baseUrl = rule.parentStyleSheet ? rule.parentStyleSheet.href : null;\n        return embedResources(rule.cssText, baseUrl, options);\n    }));\n    return cssTexts.join('\\n');\n}\nexport async function embedWebFonts(clonedNode, options) {\n    const cssText = options.fontEmbedCSS != null\n        ? options.fontEmbedCSS\n        : options.skipFonts\n            ? null\n            : await getWebFontCSS(clonedNode, options);\n    if (cssText) {\n        const styleNode = document.createElement('style');\n        const sytleContent = document.createTextNode(cssText);\n        styleNode.appendChild(sytleContent);\n        if (clonedNode.firstChild) {\n            clonedNode.insertBefore(styleNode, clonedNode.firstChild);\n        }\n        else {\n            clonedNode.appendChild(styleNode);\n        }\n    }\n}\n//# sourceMappingURL=embed-webfonts.js.map","import { cloneNode } from './clone-node';\nimport { embedImages } from './embed-images';\nimport { applyStyle } from './apply-style';\nimport { embedWebFonts, getWebFontCSS } from './embed-webfonts';\nimport { getImageSize, getPixelRatio, createImage, canvasToBlob, nodeToDataURL, checkCanvasDimensions, } from './util';\nexport async function toSvg(node, options = {}) {\n    const { width, height } = getImageSize(node, options);\n    const clonedNode = (await cloneNode(node, options, true));\n    await embedWebFonts(clonedNode, options);\n    await embedImages(clonedNode, options);\n    applyStyle(clonedNode, options);\n    const datauri = await nodeToDataURL(clonedNode, width, height);\n    return datauri;\n}\nexport async function toCanvas(node, options = {}) {\n    const { width, height } = getImageSize(node, options);\n    const svg = await toSvg(node, options);\n    const img = await createImage(svg);\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    const ratio = options.pixelRatio || getPixelRatio();\n    const canvasWidth = options.canvasWidth || width;\n    const canvasHeight = options.canvasHeight || height;\n    canvas.width = canvasWidth * ratio;\n    canvas.height = canvasHeight * ratio;\n    if (!options.skipAutoScale) {\n        checkCanvasDimensions(canvas);\n    }\n    canvas.style.width = `${canvasWidth}`;\n    canvas.style.height = `${canvasHeight}`;\n    if (options.backgroundColor) {\n        context.fillStyle = options.backgroundColor;\n        context.fillRect(0, 0, canvas.width, canvas.height);\n    }\n    context.drawImage(img, 0, 0, canvas.width, canvas.height);\n    return canvas;\n}\nexport async function toPixelData(node, options = {}) {\n    const { width, height } = getImageSize(node, options);\n    const canvas = await toCanvas(node, options);\n    const ctx = canvas.getContext('2d');\n    return ctx.getImageData(0, 0, width, height).data;\n}\nexport async function toPng(node, options = {}) {\n    const canvas = await toCanvas(node, options);\n    return canvas.toDataURL();\n}\nexport async function toJpeg(node, options = {}) {\n    const canvas = await toCanvas(node, options);\n    return canvas.toDataURL('image/jpeg', options.quality || 1);\n}\nexport async function toBlob(node, options = {}) {\n    const canvas = await toCanvas(node, options);\n    const blob = await canvasToBlob(canvas);\n    return blob;\n}\nexport async function getFontEmbedCSS(node, options = {}) {\n    return getWebFontCSS(node, options);\n}\n//# sourceMappingURL=index.js.map","export function applyStyle(node, options) {\n    const { style } = node;\n    if (options.backgroundColor) {\n        style.backgroundColor = options.backgroundColor;\n    }\n    if (options.width) {\n        style.width = `${options.width}px`;\n    }\n    if (options.height) {\n        style.height = `${options.height}px`;\n    }\n    const manual = options.style;\n    if (manual != null) {\n        Object.keys(manual).forEach((key) => {\n            style[key] = manual[key];\n        });\n    }\n    return node;\n}\n//# sourceMappingURL=apply-style.js.map"],"names":["uuid","counter","Math","random","toString","slice","toArray","arrayLike","arr","i","l","length","push","px","node","styleProperty","val","ownerDocument","defaultView","window","getComputedStyle","getPropertyValue","parseFloat","replace","getImageSize","targetNode","options","width","leftBorder","rightBorder","clientWidth","getNodeWidth","height","topBorder","bottomBorder","clientHeight","getNodeHeight","canvasDimensionLimit","createImage","url","Promise","resolve","reject","img","Image","decode","onload","onerror","crossOrigin","decoding","src","async","nodeToDataURL","xmlns","svg","document","createElementNS","foreignObject","setAttribute","appendChild","then","XMLSerializer","serializeToString","encodeURIComponent","html","svgToDataURL","isInstanceOfElement","instance","nodePrototype","Object","getPrototypeOf","constructor","name","getPseudoElementStyle","className","pseudo","style","selector","cssText","content","formatCSSText","map","getPropertyPriority","join","formatCSSProperties","createTextNode","clonePseudoElement","nativeNode","clonedNode","err","styleElement","createElement","WOFF","JPEG","mimes","woff","woff2","ttf","eot","png","jpg","jpeg","gif","tiff","webp","getMimeType","extension","match","exec","getExtension","toLowerCase","isDataUrl","search","makeDataUrl","mimeType","fetchAsDataURL","init","process","res","fetch","status","Error","blob","reader","FileReader","onloadend","result","error","readAsDataURL","cache","resourceToDataURL","resourceUrl","contentType","cacheKey","includeQueryParams","key","test","getCacheKey","dataURL","cacheBust","Date","getTime","fetchRequestInit","headers","get","split","getContentFromDataUrl","imagePlaceholder","msg","message","console","warn","cloneSingleNode","HTMLCanvasElement","canvas","toDataURL","cloneNode","cloneCanvasElement","HTMLVideoElement","video","currentSrc","ctx","getContext","drawImage","poster","cloneVideoElement","HTMLIFrameElement","iframe","_a","contentDocument","body","_b","cloneIFrameElement","isSlotElement","tagName","toUpperCase","decorate","Element","targetStyle","sourceStyle","transformOrigin","forEach","value","endsWith","reducedFont","floor","substring","getAttribute","setProperty","cloneCSSStyle","clonePseudoElements","HTMLTextAreaElement","innerHTML","HTMLInputElement","cloneInputValue","HTMLSelectElement","clonedSelect","selectedOption","Array","from","children","find","child","cloneSelectValue","isRoot","filter","assignedNodes","childNodes","shadowRoot","reduce","deferred","clonedChild","cloneChildren","clone","uses","querySelectorAll","processedDefs","id","exist","querySelector","definition","nodes","values","ns","position","overflow","display","defs","ensureSVGSymbols","URL_REGEX","URL_WITH_FORMAT_REGEX","FONT_SRC_REGEX","embed","resourceURL","baseURL","getContentFromUrl","resolvedURL","baseUrl","location","protocol","doc","implementation","createHTMLDocument","base","a","head","href","resolveUrl","escaped","RegExp","toRegex","shouldEmbed","embedResources","filteredCSSText","str","preferredFontFormat","format","filterPreferredFontFormat","urls","raw","quotation","parseURLs","css","embedProp","propName","propValue","cssString","embedImages","embedBackground","isImageElement","HTMLImageElement","SVGImageElement","baseVal","image","loading","srcset","embedImageNode","deferreds","all","embedChildren","cssFetchCache","fetchCSS","text","embedFonts","data","regexUrl","loadFonts","loc","startsWith","URL","parseCSS","source","keyframesRegex","matches","importRegex","unifiedRegex","lastIndex","parseWebFontRules","styleSheets","cssRules","ret","sheet","item","index","type","CSSRule","IMPORT_RULE","importIndex","metadata","rule","insertRule","catch","e","inline","getCSSRules","FONT_FACE_RULE","getWebFontRules","embedWebFonts","fontEmbedCSS","skipFonts","rules","parentStyleSheet","getWebFontCSS","styleNode","sytleContent","firstChild","insertBefore","toSvg","backgroundColor","manual","keys","applyStyle","toCanvas","context","ratio","pixelRatio","FINAL_PROCESS","env","devicePixelRatio","parseInt","Number","isNaN","getPixelRatio","canvasWidth","canvasHeight","skipAutoScale","checkCanvasDimensions","fillStyle","fillRect","toPng","toJpeg","quality"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}